{
	"info": {
		"_postman_id": "2ad256ba-2ed0-4a64-9ea7-72395c2c5335",
		"name": "HW_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"/* Expected structure of response:\r",
							"{'start_qa_salary':salary,\r",
							" 'qa_salary_after_6_months': salary * 2,\r",
							" 'qa_salary_after_12_months': salary * 2.9,\r",
							" 'person': {'u_name':[name, salary, age],\r",
							"                                'u_age':age,\r",
							"                                'u_salary_1.5_year': salary * 4}\r",
							"                                }\r",
							"*/\r",
							"// make a \"constant\" from task of home work\r",
							"const expectedObject = {\r",
							"    \"start_qa_salary\" : parseInt(pm.variables.get(\"salary\")),\r",
							"    \"qa_salary_after_6_months\" : parseInt(pm.variables.get(\"salary\")) * 2,\r",
							"    \"qa_salary_after_12_months\" : parseInt(pm.variables.get(\"salary\")) * 2.9,\r",
							"    \"person\" : {\r",
							"        \"u_name\" : [pm.variables.get(\"name\"), parseInt(pm.variables.get(\"salary\")), parseInt(pm.variables.get(\"age\"))],\r",
							"        \"u_age\" : pm.variables.get(\"age\"),\r",
							"        \"u_salary_1_5_year\" : parseInt(pm.variables.get(\"salary\")) *4\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"Response has expected structure\", () => {\r",
							"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking that multiplication in 'qa_salary_after_6_months' is correct\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(parseInt(pm.variables.get(\"salary\")) * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking that multiplication in 'qa_salary_after_12_months' is correct\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(parseInt(pm.variables.get(\"salary\")) * 2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking that multiplication in 'person.u_salary_1_5_year' is correct\", () => {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(parseInt(pm.variables.get(\"salary\")) * 4);\r",
							"});\r",
							"\r",
							"//parsing u_salary_1_5_years to environment\r",
							"postman.setEnvironmentVariable(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"auth_token\" : \"{{token}}\",\r\n    \"age\" : \"{{age}}\",\r\n    \"salary\" : \"{{salary}}\",\r\n    \"name\" : \"{{name}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/user_info",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"/* Expected structure of response:\r",
							"{'name':name,\r",
							"  'age': int(age),\r",
							"  'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"*/\r",
							"\r",
							"\r",
							"pm.test(\"Response has expected structure\", () => {\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.age).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.salary).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.salary[1]).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.salary[2]).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Checking that multiplication in 'salary[1]' is correct\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(parseInt(pm.variables.get(\"salary\") * 2));\r",
							"}); \r",
							"\r",
							"pm.test(\"Checking that multiplication in 'salary[2]' is correct\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql(parseInt(pm.variables.get(\"salary\") * 3));\r",
							"});\r",
							"\r",
							"pm.test(\"Checking that 'salary[2]' more than 'salary[1]' and 'salary[0]'\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[2]) > parseInt(jsonData.salary[1])).to.be.true;\r",
							"    pm.expect(parseInt(jsonData.salary[2]) > parseInt(pm.variables.get(\"salary\"))).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/new_data",
					"host": [
						"{{URL}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test pet info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"/* Expected structure of response:\r",
							"{'name': name,\r",
							" 'age': age,\r",
							" 'daily_food':weight * 0.012,\r",
							" 'daily_sleep': weight * 2.5}\r",
							"*/\r",
							"\r",
							"pm.test(\"Response has expected structure\", () => {\r",
							"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"pet_name\"));\r",
							"    pm.expect(jsonData.age).to.eql(parseInt(pm.variables.get(\"pet_age\")));\r",
							"    pm.expect(jsonData.daily_food).to.eql(pm.variables.get(\"pet_weight\") * 0.012);\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(pm.variables.get(\"pet_weight\") * 2.5);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking that multiplication in 'daily_food' is correct\", () => {\r",
							"    pm.expect(parseInt(jsonData.daily_food)).to.eql(parseInt(pm.variables.get(\"pet_weight\") * 0.012));\r",
							"}); \r",
							"\r",
							"pm.test(\"Checking that multiplication in 'daily_sleep' is correct\", () => {\r",
							"    pm.expect(parseInt(jsonData.daily_sleep)).to.eql(parseInt(pm.variables.get(\"pet_weight\") * 2.5));\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{pet_age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{pet_weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{pet_name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/test_pet_info",
					"host": [
						"{{URL}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get test user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"/* Expected structure of response:\r",
							"{'name': name,\r",
							" 'age':age,\r",
							" 'salary': salary,\r",
							" 'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							" 'u_salary_1.5_year': salary * 4}\r",
							"  }\r",
							"*/\r",
							"\r",
							"pm.test(\"Response has expected structure\", () => {\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.age).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.salary).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.u_salary_1_5_year).to.eql(parseInt(pm.variables.get(\"salary\")) * 4);\r",
							"    pm.expect(jsonData.family).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.family.children).to.be.a(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"name in response equal name in environment\", () => {\r",
							"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"age in response equal age in request\", () => {\r",
							"    pm.expect(jsonData.age).to.eql(parseInt(pm.variables.get(\"age\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/get_test_user",
					"host": [
						"{{URL}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"let random = Math.floor(Math.random() * jsonData.length);\r",
							"\r",
							"postman.setEnvironmentVariable(\"curr_code\", jsonData[random].Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/currency",
					"host": [
						"{{URL}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"/* Expected structure of response:\r",
							"{\r",
							"    \"Cur_Abbreviation\": str\r",
							"    \"Cur_ID\": int,\r",
							"    \"Cur_Name\": str,\r",
							"    \"Cur_OfficialRate\": float,\r",
							"    \"Cur_Scale\": int,\r",
							"    \"Date\": str\r",
							"}\r",
							"*/\r",
							"\r",
							"pm.test(\"Response has expected structure\", () => {\r",
							"    pm.expect(jsonData.Cur_Abbreviation).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.Cur_ID).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.Cur_Name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.Cur_OfficialRate).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.Cur_Scale).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.Cur_Date).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/curr_byn",
					"host": [
						"{{URL}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}